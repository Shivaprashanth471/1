version: 2.1
orbs:
  slack: circleci/slack@3.4.2

jobs:
  node-prod:
    working_directory: ~/app
    docker:
      - image: circleci/node:14
    steps:
      - checkout:
          path: ~/app
      - run:
          name: Installing aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Fetching env configs
          command: |
            aws s3 cp s3://vitawerks.secrets/.env.production .env.production
            aws s3 cp s3://vitawerks.secrets/vitawerk-prod.keystore vitawerk.keystore
            pwd
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: ~/app
          paths:
            - .
  node-uat:
    working_directory: ~/app
    docker:
      - image: circleci/node:14
    steps:
      - checkout:
          path: ~/app

      - run:
          name: Installing aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Fetching env configs
          command: |
            aws s3 cp s3://vitawerks.secrets/.env.uat .env.uat
            pwd
            ls
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: ~/app
          paths:
            - .
  node-qa:
    working_directory: ~/app
    docker:
      - image: circleci/node:14
    steps:
      - checkout:
          path: ~/app
      - run:
          name: Installing aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Fetching env configs
          command: |
            aws s3 cp s3://vitawerks.secrets/.env.development .env.development
            aws s3 cp s3://vitawerks.secrets/.env.qa .env.qa
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: ~/app
          paths:
            - .
  node-dev:
    working_directory: ~/app
    docker:
      - image: circleci/node:14
    steps:
      - checkout
      - run:
          name: Installing aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Fetching env configs
          command: |
            aws s3 cp s3://vitawerks.secrets/.env.development .env.development
            aws s3 cp s3://vitawerks.secrets/.env.qa .env.qa
      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      - persist_to_workspace:
          root: ~/app
          paths:
            - .
  ios-dev:
    macos:
      xcode: "13.0.0"
    working_directory: ~/app

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>

    steps:
      - checkout:
          path: ~/app

      - attach_workspace:
          at: ~/app

      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: Build and Distribute Staging
          command: bundle exec fastlane ios distribute_staging
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV

  ios-qa:
    macos:
      xcode: "13.0.0"
    working_directory: ~/app

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>

    steps:
      - checkout:
          path: ~/app

      - attach_workspace:
          at: ~/app


      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: Build and Distribute QA
          command: bundle exec fastlane ios distribute_qa
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: iOS QA Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: iOS QA Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  ios-uat:
    macos:
      xcode: "13.0.0"
    working_directory: ~/app

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>

    steps:
      - checkout:
          path: ~/app/

      - attach_workspace:
          at: ~/app

      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: Build and Distribute UAT
          command: bundle exec fastlane ios distribute_uat
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: iOS UAT Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: iOS UAT Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  ios-prod:
    macos:
      xcode: "13.0.0"
    working_directory: ~/app

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>

    steps:
      - checkout:
          path: ~/app

      - attach_workspace:
          at: ~/app

      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: Build and Distribute Prod
          command: bundle exec fastlane ios distribute_prod
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: iOS Prod Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: iOS Prod Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  android-dev:
    working_directory: ~/app
    docker:
        - image: circleci/android:api-30-node

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>
    steps:
      - checkout:
          path: ~/app/

      - attach_workspace:
          at: ~/app

      - run:
          name: checking present directory
          command: |


      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: chmod permissions
          command: |
            cd android
            chmod +x ./gradlew
      - run:
          name: Build and Distribute Staging
          command: bundle exec fastlane android distribute_staging
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: Android Staging Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: Android Staging Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  android-qa:
    working_directory: ~/app
    docker:
        - image: circleci/android:api-30-node

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>
    steps:
      - checkout:
          path: ~/app/

      - attach_workspace:
          at: ~/app

      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: chmod permissions
          command: |
            cd android
            chmod +x ./gradlew
      - run:
          name: Build and Distribute QA
          command: bundle exec fastlane android distribute_qa
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: Android QA Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: Android QA Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  android-uat:
    working_directory: ~/app
    docker:
        - image: circleci/android:api-30-node

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>
    steps:
      - checkout:
          path: ~/app/

      - attach_workspace:
          at: ~/app

      - run:
          name: checking present directory
          command: |
            pwd
            ls


      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: |
            pwd
            ls
            bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: chmod permissions
          command: |
            cd android
            chmod +x ./gradlew
      - run:
          name: Build and Distribute UAT
          command: bundle exec fastlane android distribute_uat
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: Android UAT Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: Android UAT Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
  android-prod:
    working_directory: ~/app
    docker:
      - image: circleci/android:api-30-node

    environment:
      BUILD_NUMBER: << pipeline.number >>
      VERSION_NUMBER: 0.2.<< pipeline.number >>
    steps:
      - checkout:
          path: ~/app/

      - attach_workspace:
          at: ~/app

      - run:
          name: Installing bundler
          command: gem install bundler:2.1.4
      #      - restore_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      - run:
          name: Installing bundles
          command: bundle install
      #      - save_cache:
      #          key: bundle-v1-{{ checksum "Gemfile.lock" }}-{{ arch }}
      #          paths:
      #            - vendor/bundle
      - run:
          name: chmod permissions
          command: |
            cd android
            chmod +x ./gradlew

      - run:
          name: Build and Distribute Prod
          command: bundle exec fastlane android distribute_prod
          no_output_timeout: 15m

      - run:
          name: Set git Commit Message
          command: |
            echo 'export GIT_COMMIT_DESC=$(git log --format=oneline -n 1 $CIRCLE_SHA1)' >> $BASH_ENV
            source $BASH_ENV
      # - slack/status:
      #     mentions: 'UBKQ0CRUL'
      #     failure_message: ':red_circle: Android Prod Workflow Failed trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'
      #     success_message: ':tada: Android Prod Publish Success trigger by ${CIRCLE_USERNAME} ${GIT_COMMIT_DESC}'


common_only: &common_only
  filters:
    tags:
      only: /^v.*/
    branches:
      only: main
UI-reusability_only: &UI-reusability_only
  filters:
    branches:
      only: UI-reusability
RN-upgrade_only: &RN-upgrade_only
  filters:
    branches:
      only: RN-upgrade
      
notification-maps-fix: &notification-maps-fix
  filters:
    branches:
      only: notification-maps-fix

tag_only: &tag_only
  filters:
    tags:
      only: /^v.*/
    branches:
      ignore: /.*/

no_build_only: &no_build_only
  filters:
    branches:
      only: nobuild

workflows:
  build:
    jobs:
      - hold-dev:
          only: *common_only

      - hold-qa:
          <<: *common_only
          type: approval
            

      - node-dev:
          <<: *common_only
          requires:
            - hold-dev
          context: DevEnvironment
      - node-qa:
          <<: *common_only
          requires:
            - hold-qa
          context: DevEnvironment
      - ios-dev:
          <<: *common_only
          context: DevEnvironment
          requires:
            - node-dev
      - ios-qa:
          <<: *common_only
          context: DevEnvironment
          requires:
            - node-qa
      - android-dev:
          <<: *common_only
          context: DevEnvironment
          requires:
            - node-dev
      - android-qa:
          <<: *common_only
          context: DevEnvironment
          requires:
            - node-qa

